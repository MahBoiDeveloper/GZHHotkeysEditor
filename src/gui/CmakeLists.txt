project(GZHHotkeysEditor)
# get global vars
get_property(PROJECT_DESTINATION_FOLDER GLOBAL PROPERTY PROJECT_DESTINATION_FOLDER) # exe folder
get_property(PROJECT_DESTINATION_RESOURCES_FOLDER GLOBAL PROPERTY PROJECT_DESTINATION_SOURCES_FOLDER) # resources folder
# current main target
set(TARGET_NAME Gui)

# project sources
file(
    GLOB_RECURSE SOURCES
    LIST_DIRECTORIES false
    # RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
)
# project headers
file(
    GLOB_RECURSE HEADERS
    LIST_DIRECTORIES false
    # RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp
)

#---------------------------------------------------------------------------------
#--------------------------------translation--------------------------------------
#---------------------------------------------------------------------------------
# available languages
set(LANGUAGES
    ru
)

# required to save translation sources (when activated cmake clean)
add_custom_target(TranslationSources)

# generate source translations files
find_program(LUPDATE_EXECUTABLE lupdate)
foreach(LANGUAGE ${LANGUAGES})
    set(TS_FILE ${CMAKE_CURRENT_SOURCE_DIR}/translations/${LANGUAGE}.ts)    # source translation file
    set(TRANSLATION_SOURCES ${TRANSLATION_SOURCES} ${TS_FILE})              # all source translation files
    add_custom_command(
        TARGET TranslationSources
        # OUTPUT ${TS_FILE}
        PRE_BUILD
        # generate translation source file
        COMMAND ${LUPDATE_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR} -recursive -ts ${TS_FILE} # -no-obsolete
        MAIN_DEPENDENCY ${SOURCES} ${HEADERS}
        DEPENDS ${SOURCES} ${HEADERS}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
endforeach()

# create translation binaries folder
set(TRANSLATION_DESTINATION_FOLDER ${PROJECT_DESTINATION_RESOURCES_FOLDER}/Translations)
file(MAKE_DIRECTORY ${TRANSLATION_DESTINATION_FOLDER})
# generate binary translation files
find_program(LRELEASE_EXECUTABLE lrelease)
foreach(TS_FILE ${TRANSLATION_SOURCES})
    get_filename_component(TS_CLEAN_FILE_NAME ${TS_FILE} NAME_WE)               # simple name without extension
    set (QM_FILE ${TRANSLATION_DESTINATION_FOLDER}/${TS_CLEAN_FILE_NAME}.qm)    # binary translation file name
    add_custom_command (
        OUTPUT ${QM_FILE}
        COMMAND ${LRELEASE_EXECUTABLE} ${TS_FILE} -qm ${QM_FILE}    # generation
        DEPENDS ${TS_FILE}
        MAIN_DEPENDENCY ${TS_FILE}
    )
endforeach()
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
#------------------------------------qt-------------------------------------------
#---------------------------------------------------------------------------------
set(CMAKE_PREFIX_PATH "C:/Qt/5.15.2/mingw81_64")
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
find_package(QT NAMES Qt5 REQUIRED COMPONENTS Core Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core Widgets)
#---------------------------------------------------------------------------------

# main target
add_library(${TARGET_NAME}
    ${SOURCES}
    ${HEADERS}
    ${TRANSLATION_SOURCES}
)
# add_dependencies(${TARGET_NAME} TranslationSources)
set_target_properties(${TARGET_NAME}
    PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
)
target_link_libraries(${TARGET_NAME} PUBLIC
    Qt5::Core
    Qt5::Widgets
)

#---------------------------------------------------------------------------------
#-----------------------------------Lbwebp----------------------------------------
#---------------------------------------------------------------------------------
set(LIB_WEBP_DIR libwebp)           # lib folder name
set(LIB_WEBP_NAME webpdecoder)      # lib target

# find all lib sources
file(
    GLOB_RECURSE LIB_WEBP_SOURCE_FILES
    LIST_DIRECTORIES FALSE
    ${CMAKE_CURRENT_SOURCE_DIR}/${LIB_WEBP_DIR}/*
)

# define a file that will be an indicator of source changes
set(LIB_WEBP_FILE_INDICATOR "${CMAKE_CURRENT_BINARY_DIR}/${LIB_WEBP_DIR}/LIB_WEBP_FILE_INDICATOR")
# create a lib build folder
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${LIB_WEBP_DIR})
# define a command to build libwebp (only for the selected target) if the sources have changed
add_custom_command(
    OUTPUT ${LIB_WEBP_FILE_INDICATOR}
    # create/update file indicator
    COMMAND ${CMAKE_COMMAND} -E touch ${LIB_WEBP_FILE_INDICATOR}
    # cmake configure
    COMMAND ${CMAKE_COMMAND} --no-warn-unused-cli
                             -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE
                             -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
                             -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                             -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                             -G ${CMAKE_GENERATOR}
                             ${CMAKE_CURRENT_SOURCE_DIR}/${LIB_WEBP_DIR}
    # cmake build
    COMMAND ${CMAKE_COMMAND} --build .
                             --config ${CMAKE_BUILD_TYPE}
                             --target ${LIB_WEBP_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${LIB_WEBP_DIR}
    DEPENDS ${LIB_WEBP_SOURCE_FILES}
)
# define the target that is launched by the libwebp build command and activates the rebuild of the main target 
add_custom_target(LibWebpTarget
    DEPENDS ${LIB_WEBP_FILE_INDICATOR}
)
add_dependencies(${TARGET_NAME} LibWebpTarget)

# link lib
target_link_directories(${TARGET_NAME} PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/${LIB_WEBP_DIR})
target_link_libraries(${TARGET_NAME} PRIVATE
    ${LIB_WEBP_NAME}
)
# for included headers
target_include_directories(${TARGET_NAME} PRIVATE
    ${LIB_WEBP_DIR}/src
)

#------------------------copying icons to the build folder------------------------
set(ICONS_WEBP_DIR Icons)
file(
    GLOB_RECURSE ICONS_WEBP_FILES
    LIST_DIRECTORIES TRUE
    ${CMAKE_CURRENT_SOURCE_DIR}/${ICONS_WEBP_DIR}/*
)

file(
    COPY ${CMAKE_CURRENT_SOURCE_DIR}/${ICONS_WEBP_DIR}
    DESTINATION ${PROJECT_DESTINATION_RESOURCES_FOLDER}
    FILES_MATCHING PATTERN "*"
)
#---------------------------------------------------------------------------------
