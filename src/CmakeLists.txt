project(GZHHotkeysEditor)
get_property(PROJECT_DESTINATION_FOLDER GLOBAL PROPERTY PROJECT_DESTINATION_FOLDER) # exe folder
get_property(PROJECT_DESTINATION_BIN_FOLDER GLOBAL PROPERTY PROJECT_DESTINATION_BIN_FOLDER) # bin folder
get_property(GLOBAL_PATH_TO_QT GLOBAL PROPERTY GLOBAL_PATH_TO_QT) # Qt path

# target names
set(MAIN_TARGET_NAME "LoadEditor")
set(LINK_MAIN_TARGET_NAME "HotkeyEditor")

# =========================== link target ======================================

# target link source files
file(GLOB_RECURSE TARGET_LINK_SOURCES "mainLink.cpp")

# link (to main) target
add_executable(${LINK_MAIN_TARGET_NAME}
    ${TARGET_LINK_SOURCES}
)
set_target_properties(${LINK_MAIN_TARGET_NAME}
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${PROJECT_DESTINATION_FOLDER}
)
# the path to the link program relative to the main one
target_compile_definitions(${LINK_MAIN_TARGET_NAME} PRIVATE
    -DPROJECT_EXE_RELATIVE_PATH="$<PATH:RELATIVE_PATH,$<TARGET_FILE:${MAIN_TARGET_NAME}>,${PROJECT_DESTINATION_FOLDER}>"
)

# =========================== main target ======================================

# project sources
file(
    GLOB_RECURSE SOURCES
    LIST_DIRECTORIES true
    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/*.[ch]pp
)

# gui sources
file(
    GLOB_RECURSE EXCLUDE_SOURCES
    LIST_DIRECTORIES true
    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/gui/*.[ch]pp
)

# remove unnecessary files from main target
list(REMOVE_ITEM SOURCES ${TARGET_LINK_SOURCES} ${EXCLUDE_SOURCES})

# main target
add_executable(${MAIN_TARGET_NAME}
    ${SOURCES}
)

set(_HEADER_FILES
    "config.hpp"
    "Info.hpp"
    "parsers/TechTreeJsonParser.hpp"
    "data/entity.hpp"
    "data/entity_action.hpp"
)

# declare headers folder for gui
set(_HEADERS_INCLUDE_DIRECTORY ${CMAKE_BINARY_DIR}/include CACHE STRING "Include headers directory")

# create headers folder
file(REMOVE_RECURSE  ${_HEADERS_INCLUDE_DIRECTORY})
file(MAKE_DIRECTORY ${_HEADERS_INCLUDE_DIRECTORY})

# copy headers to folder
foreach(_HEADER ${_HEADER_FILES})
    configure_file(${_HEADER} ${_HEADERS_INCLUDE_DIRECTORY} COPYONLY)
endforeach()

set_target_properties(${MAIN_TARGET_NAME}
    PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
    RUNTIME_OUTPUT_DIRECTORY ${PROJECT_DESTINATION_BIN_FOLDER}
)

# link gui subproject
subdirs(gui)
# target_sources(${MAIN_TARGET_NAME} PRIVATE $<TARGET_OBJECTS:Gui>)
target_link_libraries(${MAIN_TARGET_NAME}
    PRIVATE Gui
)

# copy additional resources
set(ALL_RESOURCE_FILES  "TechTree.json"
                        "Settings.json")
foreach(RESOURCE_FILE ${ALL_RESOURCE_FILES})
    add_custom_target(
        "${RESOURCE_FILE}Target" ALL
        COMMAND ${CMAKE_COMMAND} -E copy ${RESOURCE_FILE} ${PROJECT_DESTINATION_RESOURCES_FOLDER}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
endforeach()

# flags
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
# look https://cmake.org/pipermail/cmake/2018-August/068011.html
set(CMAKE_CXX_STANDARD_LIBRARIES "-static-libgcc -static-libstdc++ -lwsock32 -lws2_32 ${CMAKE_CSS_STANDARD_LIBRARIES}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-Bstatic,--whole-archive -lwinpthread -Wl,--no-whole-archive")

#---------------------------------------------------------------------------------
#-----------------------------------jsoncons--------------------------------------
#---------------------------------------------------------------------------------
# set(CMAKE_LIBS_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/install)

# if(POLICY CMP0135)
#     cmake_policy(SET CMP0135 NEW)
# endif()

# include(ExternalProject)
# ExternalProject_Add(jsoncons
#     URL "https://github.com/danielaparker/jsoncons/archive/refs/tags/v0.171.0.zip"
#     CMAKE_ARGS
#         -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
#         -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
#         -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_LIBS_INSTALL_PREFIX}
#         -DJSONCONS_BUILD_TESTS=OFF
# )

# find_package(jsoncons PATHS ${CMAKE_LIBS_INSTALL_PREFIX})
# target_include_directories(${JSON_LIB_TARGET_NAME} PRIVATE
#     AFTER
#     ${CMAKE_LIBS_INSTALL_PREFIX}/include
# )
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
#-------------------------------Qt libs deploy------------------------------------
#---------------------------------------------------------------------------------
if(WIN32)
    target_link_libraries(${MAIN_TARGET_NAME}
        PRIVATE rpcrt4
    )
    set(CMAKE_PREFIX_PATH ${GLOBAL_PATH_TO_QT})
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        # relese qt dll-s
        add_custom_command(
            TARGET ${MAIN_TARGET_NAME} POST_BUILD
            COMMAND "${CMAKE_PREFIX_PATH}/bin/windeployqt.exe"
                # --release
                # --no-compiler-runtime
                --compiler-runtime
                --force
                --dir $<TARGET_PROPERTY:${MAIN_TARGET_NAME},RUNTIME_OUTPUT_DIRECTORY>
                # --dir "${CMAKE_CURRENT_BINARY_DIR}/deploy"
                $<TARGET_FILE:${MAIN_TARGET_NAME}>
        )
    endif()
endif()
#---------------------------------------------------------------------------------
